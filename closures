<!DOCTYPE html>
<html>
<head>
	<meta http-eqiv="content-type" content="text/html;charset=utf-8" />
	<title>Go за Прикладом: Замикання (Closures)</title>
	<link rel=stylesheet href="site.css" />
	<script async src="https://www.googletagmanager.com/gtag/js?id=UA-75170058-3"></script>
	<script type="text/javascript">
	if (window.location.host == "gobyexample.com.ua") {
		window.dataLayer = window.dataLayer || [];
		function gtag(){dataLayer.push(arguments);}
		gtag('js',      new Date());
		gtag('config', 'UA-75170058-3');
	}
	</script>
</head>
<body>
	<div class="example" id="closures">
	<h2><a href="./">Go за Прикладом</a>: Замикання (Closures)</h2>

	<p class="warning">Work in Progress / Сайт в процесі розробки</p>

	
	<table>
		
		<tr>
			<td class="docs"><p>Go підтримує <a href="https://uk.wikipedia.org/wiki/%D0%90%D0%BD%D0%BE%D0%BD%D1%96%D0%BC%D0%BD%D0%B0_%D1%84%D1%83%D0%BD%D0%BA%D1%86%D1%96%D1%8F"><em>анонімні функції</em></a>,
що можуть створювати <a href="https://uk.wikipedia.org/wiki/%D0%97%D0%B0%D0%BC%D0%B8%D0%BA%D0%B0%D0%BD%D0%BD%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)"><em>замикання</em></a>.
Анонімні функції можутьу бути корисні, коли вам
потрібно декларувати функцію в коді без обов’язкового
найменування її.</p>
</td>
			<td class="code empty leading">
			
			
			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			<a href="http://play.golang.org/p/YV2iRxs5v8x"><img title="Run code" src="play.png" class="run" /></a>
			<div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Функція  <code>intSeq</code> повертає іншу функцію, яку ми
оголошуємо анонімно в тілі <code>intSeq</code>. Функція, що
повертається, замикається на змінні <code>i</code> та формує замикання.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="kd">func</span> <span class="nx">intSeq</span><span class="p">()</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
        <span class="nx">i</span><span class="o">++</span>
        <span class="k">return</span> <span class="nx">i</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Ми викликаємо <code>intSeq</code>, присоюємо результат (функцію)
до <code>nextInt</code>. Ця функціональна змінна замикається над
своїм власним  значенням змінної <code>i</code>, що буде оновлено
щоразу <code>nextInt</code> буде викликано.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="nx">nextInt</span> <span class="o">:=</span> <span class="nx">intSeq</span><span class="p">()</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Викличемо <code>nextInt</code> кілька раз для демонстрації ефекту замикання.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">nextInt</span><span class="p">())</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">nextInt</span><span class="p">())</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">nextInt</span><span class="p">())</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Для демонстрації того що стан є унікальним відносно
певної функції, створимо та протестуємо нове замикання.</p>
</td>
			<td class="code">
			
			<div class="highlight"><pre>    <span class="nx">newInts</span> <span class="o">:=</span> <span class="nx">intSeq</span><span class="p">()</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">newInts</span><span class="p">())</span>
<span class="p">}</span>
</pre></div>

			</td>
		</tr>
	
	</table>
	
	<table>
		
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="gp">$</span> go run closures.go
<span class="go">1</span>
<span class="go">2</span>
<span class="go">3</span>
<span class="go">1</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Останньою особливістю функцій, на яку
ми звернемо увагу буде рекурсія.</p>
</td>
			<td class="code empty">
			
			
			</td>
		</tr>
	
	</table>
	


	<p class="next">
		Наступний приклад: <a href="recursion">Рекурсія (Recursion)</a>.
	</p>

<p class="footer">
Автор <a href="https://twitter.com/mmcgrana">@mmcgrana</a> | Переклад <a href="https://twitter.com/butuzov">@butuzov</a> | <a href="https://github.com/butuzov/gobyexample/blob/ukrainian/examples/closures">source</a> | <a href="https://github.com/butuzov/gobyexample#license">ліцензія</a>
</p>
</div>
</body>
</html>
